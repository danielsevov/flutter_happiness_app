// Mocks generated by Mockito 5.3.2 from annotations
// in happiness_app/test/presentation/page/intro_history_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_local_notifications/flutter_local_notifications.dart'
    as _i10;
import 'package:happiness_app/domain/models/happiness_settings_model.dart'
    as _i2;
import 'package:happiness_app/domain/repositories/happiness_report_repo.dart'
    as _i4;
import 'package:happiness_app/domain/repositories/happiness_settings_repo.dart'
    as _i8;
import 'package:happiness_app/domain/repositories/odoo_token_repo.dart' as _i11;
import 'package:happiness_app/presentation/presenters/daily_history_presenter.dart'
    as _i3;
import 'package:happiness_app/presentation/presenters/settings_presenter.dart'
    as _i7;
import 'package:happiness_app/presentation/views/pages/daily_history_page_view.dart'
    as _i5;
import 'package:happiness_app/presentation/views/pages/settings_page_view.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHappinessSettingsModel_0 extends _i1.SmartFake
    implements _i2.HappinessSettingsModel {
  _FakeHappinessSettingsModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DailyIntrospectionHistoryPresenter].
///
/// See the documentation for Mockito's code generation for more information.
class MockDailyIntrospectionHistoryPresenter extends _i1.Mock
    implements _i3.DailyIntrospectionHistoryPresenter {
  MockDailyIntrospectionHistoryPresenter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HappinessSettingsModel get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeHappinessSettingsModel_0(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i2.HappinessSettingsModel);
  @override
  set settings(_i2.HappinessSettingsModel? _settings) => super.noSuchMethod(
        Invocation.setter(
          #settings,
          _settings,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get repositoriesAttached => (super.noSuchMethod(
        Invocation.getter(#repositoriesAttached),
        returnValue: false,
      ) as bool);
  @override
  set repositoriesAttached(bool? _repositoriesAttached) => super.noSuchMethod(
        Invocation.setter(
          #repositoriesAttached,
          _repositoriesAttached,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void attachRepositories(
          _i4.HappinessReportRepository? happinessReportRepository) =>
      super.noSuchMethod(
        Invocation.method(
          #attachRepositories,
          [happinessReportRepository],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void attach(_i5.DailyIntrospectionHistoryPageView? view) =>
      super.noSuchMethod(
        Invocation.method(
          #attach,
          [view],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void detach() => super.noSuchMethod(
        Invocation.method(
          #detach,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> fetchReports({
    int? pageLimit,
    int? currentPageIndex,
    required bool? fetchDaily,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchReports,
          [],
          {
            #pageLimit: pageLimit,
            #currentPageIndex: currentPageIndex,
            #fetchDaily: fetchDaily,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [SettingsPresenter].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsPresenter extends _i1.Mock implements _i7.SettingsPresenter {
  MockSettingsPresenter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HappinessSettingsModel get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeHappinessSettingsModel_0(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i2.HappinessSettingsModel);
  @override
  set settings(_i2.HappinessSettingsModel? _settings) => super.noSuchMethod(
        Invocation.setter(
          #settings,
          _settings,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isFirst => (super.noSuchMethod(
        Invocation.getter(#isFirst),
        returnValue: false,
      ) as bool);
  @override
  set isFirst(bool? _isFirst) => super.noSuchMethod(
        Invocation.setter(
          #isFirst,
          _isFirst,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get repositoriesAttached => (super.noSuchMethod(
        Invocation.getter(#repositoriesAttached),
        returnValue: false,
      ) as bool);
  @override
  set repositoriesAttached(bool? _repositoriesAttached) => super.noSuchMethod(
        Invocation.setter(
          #repositoriesAttached,
          _repositoriesAttached,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void attachRepositories(
          _i8.HappinessSettingsRepository? happinessSettingsRepository) =>
      super.noSuchMethod(
        Invocation.method(
          #attachRepositories,
          [happinessSettingsRepository],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void attach(_i9.SettingsPageView? view) => super.noSuchMethod(
        Invocation.method(
          #attach,
          [view],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void detach() => super.noSuchMethod(
        Invocation.method(
          #detach,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> fetchSettings() => (super.noSuchMethod(
        Invocation.method(
          #fetchSettings,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> changeLocaleSettings(String? locale) => (super.noSuchMethod(
        Invocation.method(
          #changeLocaleSettings,
          [locale],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> changeNotificationsSettings({
    required bool? monday,
    required bool? tuesday,
    required bool? wednesday,
    required bool? thursday,
    required bool? friday,
    required bool? saturday,
    required bool? sunday,
    String? timeOfTheDay,
    required _i10.Day? weeklyDayOfTheWeek,
    String? weeklyTimeOfTheDay,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeNotificationsSettings,
          [],
          {
            #monday: monday,
            #tuesday: tuesday,
            #wednesday: wednesday,
            #thursday: thursday,
            #friday: friday,
            #saturday: saturday,
            #sunday: sunday,
            #timeOfTheDay: timeOfTheDay,
            #weeklyDayOfTheWeek: weeklyDayOfTheWeek,
            #weeklyTimeOfTheDay: weeklyTimeOfTheDay,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> changeDataSettings({required bool? canShare}) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeDataSettings,
          [],
          {#canShare: canShare},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [HappinessSettingsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHappinessSettingsRepository extends _i1.Mock
    implements _i8.HappinessSettingsRepository {
  MockHappinessSettingsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.HappinessSettingsModel> getForEmployee(int? employeeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForEmployee,
          [employeeId],
        ),
        returnValue: _i6.Future<_i2.HappinessSettingsModel>.value(
            _FakeHappinessSettingsModel_0(
          this,
          Invocation.method(
            #getForEmployee,
            [employeeId],
          ),
        )),
      ) as _i6.Future<_i2.HappinessSettingsModel>);
  @override
  _i6.Future<_i2.HappinessSettingsModel> getMySettings() => (super.noSuchMethod(
        Invocation.method(
          #getMySettings,
          [],
        ),
        returnValue: _i6.Future<_i2.HappinessSettingsModel>.value(
            _FakeHappinessSettingsModel_0(
          this,
          Invocation.method(
            #getMySettings,
            [],
          ),
        )),
      ) as _i6.Future<_i2.HappinessSettingsModel>);
  @override
  _i6.Future<_i2.HappinessSettingsModel> update(
          _i2.HappinessSettingsModel? dailyIntrospection) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [dailyIntrospection],
        ),
        returnValue: _i6.Future<_i2.HappinessSettingsModel>.value(
            _FakeHappinessSettingsModel_0(
          this,
          Invocation.method(
            #update,
            [dailyIntrospection],
          ),
        )),
      ) as _i6.Future<_i2.HappinessSettingsModel>);
}

/// A class which mocks [OdooTokenRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOdooTokenRepository extends _i1.Mock
    implements _i11.OdooTokenRepository {
  MockOdooTokenRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> clearOdooToken() => (super.noSuchMethod(
        Invocation.method(
          #clearOdooToken,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> saveToken(String? value) => (super.noSuchMethod(
        Invocation.method(
          #saveToken,
          [value],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<String?> getOdooToken() => (super.noSuchMethod(
        Invocation.method(
          #getOdooToken,
          [],
        ),
        returnValue: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);
}
