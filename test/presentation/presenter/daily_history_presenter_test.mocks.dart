// Mocks generated by Mockito 5.3.2 from annotations
// in happiness_app/test/presentation/presenter/daily_history_presenter_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:happiness_app/domain/models/happiness_report_model.dart' as _i2;
import 'package:happiness_app/domain/repositories/happiness_report_repo.dart'
    as _i3;
import 'package:happiness_app/presentation/ui/widgets/daily_introspection/happiness_report.dart'
    as _i6;
import 'package:happiness_app/presentation/views/pages/daily_history_page_view.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHappinessReportModel_0 extends _i1.SmartFake
    implements _i2.HappinessReportModel {
  _FakeHappinessReportModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HappinessReportRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHappinessReportRepository extends _i1.Mock
    implements _i3.HappinessReportRepository {
  MockHappinessReportRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.HappinessReportModel>> getAllDailyReports() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllDailyReports,
          [],
        ),
        returnValue: _i4.Future<List<_i2.HappinessReportModel>>.value(
            <_i2.HappinessReportModel>[]),
      ) as _i4.Future<List<_i2.HappinessReportModel>>);
  @override
  _i4.Future<List<_i2.HappinessReportModel>> getAllWeeklyReports() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllWeeklyReports,
          [],
        ),
        returnValue: _i4.Future<List<_i2.HappinessReportModel>>.value(
            <_i2.HappinessReportModel>[]),
      ) as _i4.Future<List<_i2.HappinessReportModel>>);
  @override
  _i4.Future<_i2.HappinessReportModel> get(int? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i4.Future<_i2.HappinessReportModel>.value(
            _FakeHappinessReportModel_0(
          this,
          Invocation.method(
            #get,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.HappinessReportModel>);
  @override
  _i4.Future<_i2.HappinessReportModel> create(
          _i2.HappinessReportModel? dailyIntrospection) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [dailyIntrospection],
        ),
        returnValue: _i4.Future<_i2.HappinessReportModel>.value(
            _FakeHappinessReportModel_0(
          this,
          Invocation.method(
            #create,
            [dailyIntrospection],
          ),
        )),
      ) as _i4.Future<_i2.HappinessReportModel>);
  @override
  _i4.Future<_i2.HappinessReportModel> update(
          _i2.HappinessReportModel? dailyIntrospection) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [dailyIntrospection],
        ),
        returnValue: _i4.Future<_i2.HappinessReportModel>.value(
            _FakeHappinessReportModel_0(
          this,
          Invocation.method(
            #update,
            [dailyIntrospection],
          ),
        )),
      ) as _i4.Future<_i2.HappinessReportModel>);
  @override
  _i4.Future<bool> delete(int? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<List<_i2.HappinessReportModel>> getDailyReports(
    int? n,
    int? offset,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDailyReports,
          [
            n,
            offset,
          ],
        ),
        returnValue: _i4.Future<List<_i2.HappinessReportModel>>.value(
            <_i2.HappinessReportModel>[]),
      ) as _i4.Future<List<_i2.HappinessReportModel>>);
  @override
  _i4.Future<List<_i2.HappinessReportModel>> getWeeklyReports(
    int? n,
    int? offset,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeeklyReports,
          [
            n,
            offset,
          ],
        ),
        returnValue: _i4.Future<List<_i2.HappinessReportModel>>.value(
            <_i2.HappinessReportModel>[]),
      ) as _i4.Future<List<_i2.HappinessReportModel>>);
  @override
  _i4.Future<List<_i2.HappinessReportModel>> getLastDailyReport() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastDailyReport,
          [],
        ),
        returnValue: _i4.Future<List<_i2.HappinessReportModel>>.value(
            <_i2.HappinessReportModel>[]),
      ) as _i4.Future<List<_i2.HappinessReportModel>>);
  @override
  _i4.Future<List<_i2.HappinessReportModel>> getLastWeeklyReport() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastWeeklyReport,
          [],
        ),
        returnValue: _i4.Future<List<_i2.HappinessReportModel>>.value(
            <_i2.HappinessReportModel>[]),
      ) as _i4.Future<List<_i2.HappinessReportModel>>);
  @override
  _i4.Future<List<_i2.HappinessReportModel>> getTeamDailyReports() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTeamDailyReports,
          [],
        ),
        returnValue: _i4.Future<List<_i2.HappinessReportModel>>.value(
            <_i2.HappinessReportModel>[]),
      ) as _i4.Future<List<_i2.HappinessReportModel>>);
  @override
  _i4.Future<List<_i2.HappinessReportModel>> getTeamWeeklyReports() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTeamWeeklyReports,
          [],
        ),
        returnValue: _i4.Future<List<_i2.HappinessReportModel>>.value(
            <_i2.HappinessReportModel>[]),
      ) as _i4.Future<List<_i2.HappinessReportModel>>);
  @override
  _i4.Future<_i2.HappinessReportModel?> getReportByDate(
    String? date,
    bool? isDaily,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReportByDate,
          [
            date,
            isDaily,
          ],
        ),
        returnValue: _i4.Future<_i2.HappinessReportModel?>.value(),
      ) as _i4.Future<_i2.HappinessReportModel?>);
  @override
  _i4.Future<_i2.HappinessReportModel?> getReportByWeekNumber(
    int? weekNumber,
    int? year,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReportByWeekNumber,
          [
            weekNumber,
            year,
          ],
        ),
        returnValue: _i4.Future<_i2.HappinessReportModel?>.value(),
      ) as _i4.Future<_i2.HappinessReportModel?>);
}

/// A class which mocks [DailyIntrospectionHistoryPageView].
///
/// See the documentation for Mockito's code generation for more information.
class MockDailyIntrospectionHistoryPageView extends _i1.Mock
    implements _i5.DailyIntrospectionHistoryPageView {
  MockDailyIntrospectionHistoryPageView() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setInProgress(bool? inProgress) => super.noSuchMethod(
        Invocation.method(
          #setInProgress,
          [inProgress],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyNoReportsFound() => super.noSuchMethod(
        Invocation.method(
          #notifyNoReportsFound,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyFetchFailed(String? errorMessage) => super.noSuchMethod(
        Invocation.method(
          #notifyFetchFailed,
          [errorMessage],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyReportsFetched(
    List<_i6.HappinessReport>? reportWidgets,
    bool? hasMoreReports,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #notifyReportsFetched,
          [
            reportWidgets,
            hasMoreReports,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
